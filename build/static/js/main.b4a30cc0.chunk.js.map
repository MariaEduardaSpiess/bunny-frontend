{"version":3,"sources":["bunny.png","serviceWorker.js","services/api.js","paginas/user/index.js","paginas/user/add/index.js","paginas/user-task/index.js","paginas/user-task/add/index.js","routes.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","api","axios","create","baseURL","Title","Typography","Column","Table","User","useState","users","setUsers","useEffect","get","then","response","data","type","icon","UserAddOutlined","href","style","marginBottom","dataSource","title","dataIndex","key","render","record","to","JSON","stringify","AddUser","Form","useForm","form","history","useHistory","layout","onFinish","values","post","console","log","push","gutter","span","Item","label","name","rules","required","htmlType","UserTask","tasks","setTasks","user","useParams","parse","id","FileAddOutlined","columns","Option","Select","AddUserTask","TextArea","rows","value","Routes","path","exact","component","App","Header","Layout","Content","Footer","className","src","logo","alt","padding","textAlign","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4a30cc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bunny.c4748d75.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nconst api = axios.create({\n    baseURL : 'https://bunny-assignment-backend.herokuapp.com/'\n});\n\nexport default api;","import React, { useState, useEffect } from 'react';\nimport { Table, Typography, Button } from 'antd';\nimport api from '../../services/api';\nimport { Link } from \"react-router-dom\";\nimport { UserAddOutlined } from '@ant-design/icons';\n\nconst { Title } = Typography;\n\nconst { Column } = Table;\n\nfunction User() {\n\n    let [users, setUsers] = useState([]);\n\n    useEffect(() => {\n        api.get('user').then(response => {\n            setUsers(response.data);\n        });\n    }, []);\n\n    return (\n        <div>\n            <Title>Users</Title>\n            <Button type=\"primary\" icon={<UserAddOutlined />} href=\"/add-user/\" style={{marginBottom: '16px'}}>\n                Add user\n            </Button>\n            <Table dataSource={users}>\n                <Column title=\"Id\" dataIndex=\"id\" key=\"id\" />\n                <Column title=\"Name\" dataIndex=\"name\" key=\"name\" />\n                <Column\n                    title=\"Action\"\n                    render={(record) => (\n                        <Link to={\"/user-tasks/\" + JSON.stringify(record)}>User Tasks</Link>\n                    )}\n                />\n            </Table>\n        </div>\n    );\n}\n\nexport default User;","import React from 'react';\nimport api from '../../../services/api';\nimport { Form, Input, Button, Row, Col } from 'antd';\nimport { useHistory } from \"react-router-dom\";\n\nfunction AddUser() {\n\n    const [form] = Form.useForm();\n    const history = useHistory();\n    \n    const onFinish = values => {\n        api.post('user', values).then(response => {\n            console.log('Top!');\n            history.push('/');\n        });\n    };\n\n    return (\n        <div>\n            <Form form={form} layout=\"vertical\" onFinish={onFinish}>\n                <Row gutter={16}>\n                    <Col span={24}>\n                        <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true }]}>\n                            <Input />\n                        </Form.Item>        \n                    </Col>\n                </Row>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">Salvar</Button>\n                </Form.Item>\n            </Form>\n        </div>\n    );\n}\n\nexport default AddUser;","import React, {useState, useEffect} from 'react';\nimport { Table, Typography, Button } from 'antd';\nimport api from '../../services/api';\nimport { useParams } from \"react-router-dom\";\nimport { FileAddOutlined } from '@ant-design/icons';\n\nconst { Title } = Typography;\n\nfunction UserTask() {\n\n    let [tasks, setTasks] = useState([]);\n    let { user } = useParams();\n\n    user = JSON.parse(user);\n\n    useEffect(() => {\n        api.get('user-task?user=' + user.id).then(response => {\n            setTasks(response.data);\n        });\n    }, []);\n      \n    const columns = [\n        { title: 'Id', dataIndex: 'id', key: 'id' },\n        { title: 'Description', dataIndex: 'description', key: 'description' },\n        { title: 'State', dataIndex: 'state', key: 'state' }\n    ];\n      \n    return (\n        <div>\n            <Title>Taks of {user.name}</Title>\n            <Button type=\"primary\" icon={<FileAddOutlined />} href={\"/add-task/\" + JSON.stringify(user)} style={{marginBottom: '16px'}}>\n                Add task\n            </Button>\n            <Table dataSource={tasks} columns={columns} />\n        </div>\n    );\n}\n\nexport default UserTask;","import React from 'react';\nimport api from '../../../services/api';\nimport { Form, Input, Button, Row, Col, Select } from 'antd';\nimport { useParams, useHistory } from \"react-router-dom\";\n\nconst { Option } = Select;\n\nfunction AddUserTask() {\n\n    const [form] = Form.useForm();\n    let { user } = useParams();\n    user = JSON.parse(user);\n    const history = useHistory();\n    \n    const onFinish = values => {\n        api.post('user-task?user=' + user.id, values).then(response => {\n            console.log('Top!');\n            history.push('/user-tasks/' + JSON.stringify(user));\n        });\n    };\n\n    return (\n        <div>\n            <Form form={form} layout=\"vertical\" onFinish={onFinish}>\n                <Row gutter={16}>\n                    <Col span={24}>\n                        <Form.Item label=\"Description\" name=\"description\" rules={[{ required: true }]}>\n                            <Input.TextArea rows={4} />\n                        </Form.Item>        \n                    </Col>\n                    <Col span={4}>\n                        <Form.Item label=\"State\" name=\"state\" rules={[{ required: true }]}>\n                        <Select>\n                            <Option value=\"TO_DO\">To Do</Option>\n                            <Option value=\"DONE\">Done</Option>\n                        </Select>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\">Salvar</Button>\n                </Form.Item>\n            </Form>\n        </div>\n    );\n}\n\nexport default AddUserTask;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport User from './paginas/user';\nimport AddUser from './paginas/user/add';\nimport UserTask from './paginas/user-task';\nimport AddUserTask from './paginas/user-task/add';\n\nfunction Routes() {\n    return (\n        <Switch>\n            <Route path=\"/\" exact={true} component={User} />\n            <Route path=\"/add-user\" exact={true} component={AddUser} />\n            <Route path=\"/user-tasks/:user\" exact={true} component={UserTask} />\n            <Route path=\"/add-task/:user\" exact={true} component={AddUserTask} />\n        </Switch>\n    )\n}\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './routes';\nimport { Layout } from 'antd';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport logo from './bunny.png';\n\nfunction App() {\n  const { Header, Content, Footer } = Layout;\n  return (\n    <Router>\n      <Layout>\n        <Header>\n          <a href=\"/\"><img className=\"logo\" src={logo} alt=\"Logo\" /></a>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <div className=\"site-layout-content\">\n            <Routes />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; \nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}